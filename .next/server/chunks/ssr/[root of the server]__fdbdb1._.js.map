{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file://C%3A/codequest/src/app/problems/%5Bid%5D/page.tsx"],"sourcesContent":["\"use client\";\r\nimport { FC, useEffect, useState, useRef } from \"react\";\r\nimport { useParams } from \"next/navigation\";\r\nimport { Squestions } from \"@/app/modals/SpecificQuestions\";\r\nimport axios from \"axios\";\r\nimport CodeMirror from \"@uiw/react-codemirror\";\r\nimport { java } from \"@codemirror/lang-java\"; // Java syntax\r\nimport { oneDark } from '@codemirror/theme-one-dark';\r\nimport gsap from \"gsap\";\r\nimport { EditorView } from '@codemirror/view';\r\nimport { useRouter } from \"next/navigation\";\r\n\r\n\r\n\r\n\r\nconst ProblemDetailsPage: FC = () => {\r\n  const { id } = useParams();\r\n  const [code, setCode] = useState<string>();\r\n \r\n  const [loadingforSubmit, setLoadingforSubmit] = useState(false);\r\n  const [loadingforRun, setLoadingforRun] = useState(false);\r\n  // const [compilerResult, setCompilerResult] = useState(\"\");\r\n  const [questions, setQuestions] = useState<Squestions | null>(null);\r\n  const [results, setResults] = useState<string[]>([]);\r\n  const [flip,setFlip] = useState(false)\r\n  const [canSubmit, setCanSubmit] = useState<boolean>(false);\r\n  const [isRunDisabled,setIsRunDisabled] = useState(false)\r\n\r\n \r\nconsole.log(\"id at :\",id);\r\n\r\n  const compilerRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const res = await fetch(`/api/SpecificQuestions/${id}`, {\r\n          method: \"POST\",\r\n          headers: {\"Content-Type\": \"application/json\"},\r\n          body: JSON.stringify({id}),\r\n        });\r\n        if (!res.ok) {\r\n          throw new Error(\"Failed to fetch questions\")\r\n        }\r\n        const data: Squestions = await res.json();\r\n        console.log(data);\r\n        setQuestions(data);\r\n      } catch (err: unknown) {\r\n        console.log(err)\r\n      }\r\n    }\r\n    fetchQuestions();\r\n  }, [id])\r\n\r\n  console.log(\"questions at s:\", questions)\r\n\r\n\r\n\r\n  const handleRun = async () => {\r\n\r\n    // Simulate a compilation process\r\n\r\n    if (!questions || !questions.testCases || !code?.trim()) {\r\n      alert(\"Plese provide code\")\r\n      return;\r\n    }\r\n    setLoadingforRun(true);\r\n    setIsRunDisabled(true);\r\n\r\n    const compiler = compilerRef.current;\r\n    if(compiler){\r\n      gsap\r\n      .timeline()\r\n      .to(compiler,{rotateY: 180,opacity:0, duration: 0.5, })\r\n\r\n      .call( () => {\r\n        setFlip(true);\r\n      })\r\n      .to(compiler, { rotateY: 0,opacity:1, duration: 1 })\r\n    }\r\n     \r\n        const testResults: string[] = [];\r\n\r\n\r\n\r\n    try {\r\n      for (const testCase of questions?.testCases) {\r\n        interface TestCase {\r\n          input: string;\r\n          target?: string;\r\n          expectedOutput: string;\r\n        }\r\n\r\n        const generateStdin = (testCase: TestCase) => {\r\n          const questionTitle = questions.title.toLowerCase();\r\n          console.log(\"question title: \", questionTitle)\r\n          if (questionTitle.includes(\"two sum\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0]; // Extract the array part, e.g., \"[2,7,11,15]\"\r\n            const nums = JSON.parse(numsString); // Parse it into a JavaScript array\r\n            const target = testCase.target;\r\n\r\n            // Construct `stdin`\r\n            // const size = nums.length;\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}\\n${target}`;\r\n          } else if (questionTitle.includes(\"best time to buy and sell stocks\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"reverse string\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"longest palindromic substring\")) {\r\n            const inputString = testCase.input.match(/\"([^\"]+)\"/)?.[1]; // Extract the content inside quotes\r\n            if (inputString) {\r\n              return inputString.split(\"\").join(\" \"); // Split characters and join with spaces\r\n            }\r\n\r\n          } else if (questionTitle.includes(\"reverse linked list\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"detect cycle in linked list\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}\\n${testCase.target}`;\r\n          } else if (questionTitle.includes(\"valid parentheses\")) {\r\n            const numsString = testCase.input.match(/\"([^\"]+)\"/)?.[1];\r\n\r\n            const numsAsString = numsString ? numsString.split(\"\").join(\"\") : \"\";\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"min stack\")) {\r\n            // Extract input arrays using regular expressions\r\n            const matches = testCase.input.match(/\\[.*?\\](?=\\s*\\[|\\s*$)/g);  // Match each array (with non-greedy behavior)\r\n\r\n            if (!matches) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString1 = matches[0];  // First array ([\"MinStack\", \"push\", \"push\", \"push\", \"getMin\", \"pop\", \"top\", \"getMin\"])\r\n            const numsString2 = matches[1];  // Second array ([[], [-2], [0], [-3], [], [], [], []])\r\n\r\n            console.log(\"numsString1: \", numsString1);\r\n            console.log(\"numsString2: \", numsString2);\r\n\r\n            // Parse the input arrays from strings into JavaScript objects\r\n            const operations = JSON.parse(numsString1);  // This will be the operations array [\"MinStack\", \"push\", \"push\", \"push\", \"getMin\", \"pop\", \"top\", \"getMin\"]\r\n            const values = JSON.parse(numsString2);  // This will be the values array [[], [-2], [0], [-3], [], [], [], []]\r\n\r\n            // Format the strings as needed\r\n            const operationsAsString = operations.join(\" \");\r\n             values.map((value: unknown) => JSON.stringify(value)).join(\" \");\r\n\r\n            // Return formatted string\r\n            return `${operationsAsString}\\n${numsString2}`;\r\n          }\r\n\r\n          else if (questionTitle.includes(\"largest rectangle in histogram\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"implement queue using stacks \")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"sliding window maximum\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}\\n${testCase.target}`;\r\n          }\r\n          else if (questionTitle.includes(\"circular queue\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          }\r\n          else if (questionTitle.includes(\"maximum depth of binary tree\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          }\r\n          else if (questionTitle.includes(\"validate binary tree\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          }\r\n          else if (questionTitle.includes(\"serialize and deserialize\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"graph valid tree\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"course schedule\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"minimum spanning tree\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"climbing stairs\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"longest increasing subsequence\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          } else if (questionTitle.includes(\"edit distance\")) {\r\n            const numsMatch = testCase.input.match(/\\[.*\\]/);\r\n            if (!numsMatch) {\r\n              throw new Error(\"Invalid input format\");\r\n            }\r\n            const numsString = numsMatch[0];\r\n            const nums = JSON.parse(numsString);\r\n            const numsAsString = nums.join(\" \");\r\n            return `${numsAsString}`;\r\n          }\r\n        };\r\n        console.log(\"Generated stdin: \", generateStdin(testCase));\r\n        const SubmissionData = JSON.stringify({\r\n          language_id: '62',\r\n          source_code: code,\r\n          stdin: generateStdin(testCase),\r\n          redirect_stderr_to_stdout: true,\r\n        })\r\n        const submissionResponse = await axios.post(\"/api/judge0/submissions\", SubmissionData, {\r\n          headers: {\r\n            'x-rapidapi-key': '58493a33a0msh7bc55e0a5784767p1a9e4ejsn8a774b36e82b',\r\n            'x-rapidapi-host': 'judge0-ce.p.rapidapi.com',\r\n            'Content-Type': 'application/json'\r\n          },\r\n        });\r\n        console.log(\"Submission response:\", submissionResponse.data);\r\n        const token = submissionResponse.data.token;\r\n\r\n        const resultResponse = await new Promise((resolve) => {\r\n          setTimeout(async () => {\r\n            const result = await axios.get(`/api/judge0/submissions/${token}`,\r\n              {\r\n                params: {\r\n                  base64_encoded: 'true',\r\n                  fields: '*'\r\n                },\r\n                headers: {\r\n                  'x-rapidapi-key': '58493a33a0msh7bc55e0a5784767p1a9e4ejsn8a774b36e82b',\r\n                  'x-rapidapi-host': 'judge0-ce.p.rapidapi.com'\r\n                }\r\n              }\r\n            );\r\n            resolve(result.data);\r\n          }, 3000);\r\n        })\r\n\r\n        interface Result {\r\n          status_id: number;\r\n          status: { description: string };\r\n          stdout: string;\r\n        }\r\n\r\n        const result = resultResponse as Result;\r\n        console.log(\"result: \", result)\r\n        console.log(\"status id: \", result.status_id);\r\n        console.log(\"status description : \", result.status.description);\r\n        console.log(\"stdOut: \", result.stdout)\r\n        const decodedStdout = atob(result.stdout)\r\n        console.log(\"decoded: \", decodedStdout)\r\n        const actualOutput = decodedStdout ? decodedStdout.trim() : \"Error or no output\";\r\n        console.log(\"actual output: \", actualOutput)\r\n\r\n        const isCorrect = actualOutput.trim() === testCase.expectedOutput.replace(/[\\[\\],\"']/g, \"\").replace(/(\\d)(?=\\d)/g, '$1 ').trim();\r\n        console.log(\"expected output: \", testCase.expectedOutput.replace(/[\\[\\],\"']/g, \"\").replace(/(\\d)(?=\\d)/g, '$1 ').trim());\r\n        \r\n        if(isCorrect){\r\n          setTimeout(() => {setCanSubmit(true);},5000)\r\n          \r\n\r\n        }else{\r\n          setCanSubmit(false)\r\n          setIsRunDisabled(false)\r\n        }\r\n\r\n        testResults.push(`Test Case: Input(${testCase.input}) - Expected(${testCase.expectedOutput}) - Actual(${actualOutput}) - ${isCorrect ? \"✔️ Passed\" : \"❌ Failed\"}`)\r\n      }\r\n      setResults(testResults);\r\n      // gsap.fromTo('.result-container', { opacity: 0 }, { opacity: 1, duration: 1 });\r\n    } catch (error: unknown) {\r\n      testResults.push(\"Error occurred while running the code.\");\r\n      setResults(testResults);\r\n      console.log(error);\r\n      setIsRunDisabled(false)\r\n    }\r\n    finally {\r\n      setLoadingforRun(false)\r\n      \r\n    }\r\n     \r\n    \r\n  };\r\n  const router = useRouter();\r\n  const handleSubmit = async () => {\r\n    if (!canSubmit) {\r\n      alert(\"Please pass all test cases before submission.\");\r\n      return;\r\n    }\r\n   \r\n  \r\n    setLoadingforSubmit(true);\r\n    try {\r\n      const currentId = Number(id);\r\n      console.log(\"Current Question ID:\", currentId);\r\n  \r\n      // Step 1: Set the current question status to completed\r\n      const responseforStatus = await fetch(`/api/submit/${currentId}/status`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({questionId: currentId}),\r\n      });\r\n  \r\n      if (!responseforStatus.ok) {\r\n        throw new Error(\"Failed to update question status\");\r\n      }\r\n\r\n      // Update question status via API\r\n      const nextId = Number(id) + 1;\r\n      console.log(\"nextID: \",nextId)\r\n      const response = await fetch(`/api/submit/${nextId}/unlock`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ questionId: nextId }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to update question status\");\r\n      }\r\n  \r\n      // Update local state to reflect the unlocked status\r\n     \r\n  \r\n      //setCompilerResult(\"Code submitted\");\r\n       router.push(\"/problemset\");\r\n    } catch (err) {\r\n      console.error(\"Error updating question status:\", err);\r\n     // setCompilerResult(\"Failed to unlock question. Please try again.\");\r\n    } finally {\r\n      setLoadingforSubmit(false);\r\n    }\r\n  };\r\n  \r\n  const handleRewriteCode = () => {\r\n   // setCode(\"\");  // Clear the code so user can re-enter it\r\n   setFlip(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-r from-purple-500 via-pink-400 to-orange-300 p-8\">\r\n      <div className=\"max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Left Column: Question Details */}\r\n        {questions ? (\r\n          <div className=\"bg-[#0c0c29] text-white rounded-lg shadow-lg p-6\">\r\n            <h1 className=\"text-3xl font-bold mb-4 text-purple-300\">\r\n              {questions.id}. {questions.title}\r\n            </h1>\r\n            <button \r\n  onClick={() => router.back()} \r\n  className=\"back-button z-10 absolute top-[3rem] left-[1rem] bg-[#0c0c29] text-white px-4 py-2 rounded-full shadow-lg hover:bg-purple-300 hover:text-black transform transition duration-300 ease-in-out hover:scale-105 focus:outline-none focus:ring-2 focus:ring-purple-500 flex items-center space-x-2\"\r\n>\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" strokeWidth=\"2\">\r\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 12H5m7-7l-7 7 7 7\" />\r\n  </svg>\r\n  <span>Back</span>\r\n</button>\r\n            <p className=\"text-md mb-6\">\r\n              <strong className=\"text-purple-300 text-xl\">Description:</strong>\r\n              <br />\r\n              <br />\r\n              {questions.description.map((line, index) => (\r\n                <span key={index} className=\"\">\r\n                  {line}\r\n                  <br />\r\n                  <br />\r\n                </span>\r\n              ))}\r\n            </p>\r\n            <h2 className=\"text-2xl font-bold mb-4 text-pink-300\">Test Cases:</h2>\r\n            <ul className=\"space-y-2\">\r\n              {questions.testCases.map((test, index) => (\r\n                <li key={index} className=\"p-4 bg-purple-500/20 rounded-md shadow-md\">\r\n                  <strong>{index + 1}. Input:</strong> {test.input}\r\n                  {test.target && (\r\n                    <>\r\n                      <strong>{\", \"}target:</strong> {test.target}\r\n                    </>\r\n                  )}\r\n                  <br />\r\n                  <strong className=\"ml-4\">Expected Output:</strong> {test.expectedOutput}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n\r\n          </div>\r\n        ) : (\r\n          <div className=\"flex justify-center items-center h-96\">\r\n          <div className=\"loader border-t-4 border-[#0c0c29] rounded-full w-12 h-12 animate-spin\"></div>\r\n        </div>\r\n        )}\r\n\r\n        {/* Right Column: Code Editor & Results */}\r\n       \r\n        <div   className=\"bg-[#0c0c29] text-white rounded-lg shadow-lg p-6\">\r\n          <h2 className=\"text-2xl font-semibold mb-4  text-purple-300\">Code Compiler</h2>\r\n          {!flip ? (\r\n<div ref={compilerRef}>\r\n          <CodeMirror \r\n            value={code?.toString()}\r\n            height=\"400px\"\r\n            theme={oneDark}\r\n           \r\n            onChange={(value) => setCode(value)}\r\n            className=\"rounded-xl \"\r\n            extensions={[\r\n              java(), // Java language support\r\n              EditorView.lineWrapping, // Enables line wrapping\r\n            ]}\r\n          />\r\n          </div>\r\n          ):(\r\n            results.length > 0 ? (\r\n              <div className=\"space-y-4\">\r\n                {results.map((result, index) => {\r\n                  const isPassed = result.includes(\"✔️\");\r\n                  //const resultClass = isPassed ? \"text-green-400\" : \"text-red-400\";\r\n      \r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      className=\"p-4 bg-gray-800 rounded-md shadow-md border border-gray-700 hover:shadow-lg transition\"\r\n                    >\r\n                      <div className=\"flex items-center justify-between mb-2\">\r\n                        <p className=\"font-semibold text-lg\">\r\n                          Test Case {index + 1}:\r\n                        </p>\r\n                        <span\r\n                          className={`text-2xl ${isPassed ? \"text-green-400\" : \"text-red-400\"}`}\r\n                        >\r\n                          {isPassed ? \"✔️\" : \"❌\"}\r\n                        </span>\r\n                      </div>\r\n                      <p>\r\n                        <strong className=\"text-purple-300\">Input:</strong>{\" \"}\r\n                        <span className=\"text-white\">{result.match(/Input\\((.*?)\\)/)?.[1]}</span>\r\n                      </p>\r\n                      <p>\r\n                        <strong className=\"text-pink-300\">Expected:</strong>{\" \"}\r\n                        <span className=\"text-white\">{result.match(/Expected\\((.*?)\\)/)?.[1]}</span>\r\n                      </p>\r\n                      <p>\r\n                        <strong className=\"text-orange-300\">Actual:</strong>{\" \"}\r\n                        <span className={`${isPassed ? \"text-green-300\" : \"text-red-300\"}`}>\r\n                          {result.match(/Actual\\((.*?)\\)/)?.[1]}\r\n                        </span>\r\n                      </p>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex justify-center items-center h-96\">\r\n          <div className=\"loader border-t-4 border-purple-400 rounded-full w-12 h-12 animate-spin\"></div>\r\n        </div>\r\n            )\r\n                  )}\r\n          <div className=\"flex gap-5 mt-4\">\r\n            <button\r\n              onClick={handleRun}\r\n              disabled={loadingforRun || isRunDisabled}\r\n              className={`w-1/4 py-2 ${(loadingforRun || isRunDisabled) ? \"bg-purple-300 cursor-not-allowed\" : \"bg-purple-500 hover:bg-purple-700\"\r\n                } text-white font-semibold rounded-lg transition`}\r\n            >\r\n              {loadingforRun ? \"Running...\" : \"Run\"}\r\n            </button>\r\n            {flip && \r\n            <button\r\n          className=\"rewrite-button bg-purple-500 w-24 rounded\"\r\n          onClick={handleRewriteCode}\r\n        >\r\n          Edit Code\r\n        </button>\r\n}\r\n            <button\r\n              onClick={handleSubmit}\r\n              disabled={!canSubmit || loadingforSubmit}\r\n              className={`w-1/4 py-2 ${!loadingforSubmit && !canSubmit ? \"bg-purple-300 cursor-not-allowed\" : \"bg-green-500 hover:bg-green-600\"\r\n                } text-white font-semibold rounded-lg transition`}\r\n            >\r\n              {loadingforSubmit ? \"Submitting...\" : \"Submit\"}\r\n            </button>\r\n          </div>\r\n         \r\n          </div>\r\n          \r\n      \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemDetailsPage;\r\n\r\n\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 953, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}