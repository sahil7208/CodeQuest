{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/codequest/src/app/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\ndeclare global {\r\n  var mongoose: mongoose.Connection;\r\n}\r\n\r\n\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function dbConnect() {\r\n  if (cached.conn) return cached.conn;\r\n\r\n  const mongoUri = process.env.MONGO_URI;\r\n\r\n  \r\n  if (!mongoUri) {\r\n    throw new Error('MongoDB connection URI is not defined in environment variables.');\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = new Promise((resolve, reject) => {\r\n      mongoose.connect(mongoUri, {\r\n       \r\n      })\r\n      .then((mongooseInstance) => resolve(mongooseInstance))\r\n      .catch((err) => reject(err));\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n    return cached.conn;\r\n  } catch (error) {\r\n    console.error('Error connecting to MongoDB:', error);\r\n    throw new Error('Database connection failed');\r\n  }\r\n}\r\n\r\nexport default dbConnect;\r\n"],"names":[],"mappings":";;;AAAA;;AAOA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,MAAM,WAAW,QAAQ,GAAG,CAAC,SAAS;IAGtC,IAAI,CAAC,UAAU;QACb,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,IAAI,QAAQ,CAAC,SAAS;YACrC,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,UAAU,CAE3B,GACC,IAAI,CAAC,CAAC,mBAAqB,QAAQ,mBACnC,KAAK,CAAC,CAAC,MAAQ,OAAO;QACzB;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;QAClC,OAAO,OAAO,IAAI;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file://C%3A/codequest/src/app/modals/SpecificQuestions.ts"],"sourcesContent":["import {Schema,models,model,Document} from 'mongoose';\r\n\r\nexport interface TestCase {\r\n    input: string;\r\n    expectedOutput: string;\r\n    target?: string;\r\n  }\r\n\r\nexport interface Squestions extends Document {\r\n    id: number;\r\n    title: string;\r\n    description: string[];\r\n    testCases: TestCase[];\r\n}\r\n\r\n\r\n\r\nconst SpecificQuestionSchema = new Schema<Squestions>({\r\n    id: { type: Number },\r\n    title: {type: String, required: true},\r\n    description: { type: [String], required: true},\r\n    testCases: [{\r\n        input: { type: String, required: true },\r\n        expectedOutput: { type: String, required: true }\r\n      }]\r\n})\r\n\r\nconst SpecificQuestion = models.SpecificQuestion || model<Squestions>('SpecificQuestion', SpecificQuestionSchema);\r\n\r\nexport default SpecificQuestion;"],"names":[],"mappings":";;;AAAA;;AAiBA,MAAM,yBAAyB,IAAI,yGAAA,CAAA,SAAM,CAAa;IAClD,IAAI;QAAE,MAAM;IAAO;IACnB,OAAO;QAAC,MAAM;QAAQ,UAAU;IAAI;IACpC,aAAa;QAAE,MAAM;YAAC;SAAO;QAAE,UAAU;IAAI;IAC7C,WAAW;QAAC;YACR,OAAO;gBAAE,MAAM;gBAAQ,UAAU;YAAK;YACtC,gBAAgB;gBAAE,MAAM;gBAAQ,UAAU;YAAK;QACjD;KAAE;AACR;AAEA,MAAM,mBAAmB,yGAAA,CAAA,SAAM,CAAC,gBAAgB,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAc,oBAAoB;uCAE3E"}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file://C%3A/codequest/src/app/api/SpecificQuestions/%5Bid%5D/route.ts"],"sourcesContent":["\r\n\r\nimport dbConnect from \"@/app/lib/mongodb\";\r\nimport SpecificQuestion, { Squestions } from \"@/app/modals/SpecificQuestions\";\r\nimport {  NextRequest, NextResponse } from \"next/server\";\r\n\r\ninterface RouteParams {\r\n  params: {\r\n    id: string;\r\n  };\r\n}\r\n\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    await dbConnect(); \r\n   \r\n    const { id } = await req.json(); \r\n    console.log(\"id: \",id)\r\n    if (!id) {\r\n      return NextResponse.json({ error: \"ID is required\" }, { status: 400 });\r\n    }\r\n\r\n    \r\n    const question: Squestions | null = await SpecificQuestion.findOne({ id: Number(id) });\r\n\r\n    if (!question) {\r\n      return NextResponse.json({ error: \"Question not found\" }, { status: 404 });\r\n    }\r\n\r\n    \r\n    return NextResponse.json(question, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch questions: \", error);\r\n    return NextResponse.json({ error: \"Failed to fetch questions\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAEA;AACA;AACA;;;;AASO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,CAAA,GAAA,8HAAA,CAAA,UAAS,AAAD;QAEd,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,IAAI,IAAI;QAC7B,QAAQ,GAAG,CAAC,QAAO;QACnB,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAGA,MAAM,WAA8B,MAAM,2IAAA,CAAA,UAAgB,CAAC,OAAO,CAAC;YAAE,IAAI,OAAO;QAAI;QAEpF,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAGA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;YAAE,QAAQ;QAAI;IACnD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF"}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}