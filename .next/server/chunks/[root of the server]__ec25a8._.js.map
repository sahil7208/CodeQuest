{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/codequest/src/app/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\ndeclare global {\r\n  var mongoose: mongoose.Connection;\r\n}\r\n\r\n\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function dbConnect() {\r\n  if (cached.conn) return cached.conn;\r\n\r\n  const mongoUri = process.env.MONGO_URI;\r\n\r\n  \r\n  if (!mongoUri) {\r\n    throw new Error('MongoDB connection URI is not defined in environment variables.');\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = new Promise((resolve, reject) => {\r\n      mongoose.connect(mongoUri, {\r\n       \r\n      })\r\n      .then((mongooseInstance) => resolve(mongooseInstance))\r\n      .catch((err) => reject(err));\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n    return cached.conn;\r\n  } catch (error) {\r\n    console.error('Error connecting to MongoDB:', error);\r\n    throw new Error('Database connection failed');\r\n  }\r\n}\r\n\r\nexport default dbConnect;\r\n"],"names":[],"mappings":";;;AAAA;;AAOA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,MAAM,WAAW,QAAQ,GAAG,CAAC,SAAS;IAGtC,IAAI,CAAC,UAAU;QACb,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,IAAI,QAAQ,CAAC,SAAS;YACrC,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,UAAU,CAE3B,GACC,IAAI,CAAC,CAAC,mBAAqB,QAAQ,mBACnC,KAAK,CAAC,CAAC,MAAQ,OAAO;QACzB;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;QAClC,OAAO,OAAO,IAAI;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file://C%3A/codequest/src/app/modals/questions.ts"],"sourcesContent":["import { Schema, model, models, Document } from 'mongoose';\r\n\r\nexport type questions = {\r\n  id: string;\r\n  title: string;\r\n  difficulty: \"Easy\" | \"Medium\" | \"Hard\";\r\n  status: \"ðŸ”’Locked\" | \"Unlocked\";\r\n  route?: string;\r\n}\r\n\r\nexport interface IQuestion extends Document {\r\n category: string;\r\n questions: questions[];\r\n}\r\n\r\nconst questionSchema = new Schema<IQuestion>({\r\n  category: {type: String, required: true},\r\n  questions: [{\r\n    title: {type: String, required: true},\r\n    id: {type: String, required: true},\r\n    difficulty: {type: String, required: true, enum: ['Easy','Medium','Hard']},\r\n    status:{type: String, required: true,enum:[\"ðŸ”’Locked\",\"Unlocked\"]},\r\n    route: {type: String,required: true}\r\n  }\r\n  ]\r\n}\r\n//   {\r\n//   title: { type: String, required: true },\r\n//   difficulty: { type: String, required: true, enum: ['Easy', 'Medium', 'Hard'] },\r\n//   status: { type: String, required: true },\r\n// }\r\n);\r\n\r\nconst Question = models.Question || model<IQuestion>('Question', questionSchema);\r\n\r\nexport default Question;\r\n"],"names":[],"mappings":";;;AAAA;;AAeA,MAAM,iBAAiB,IAAI,yGAAA,CAAA,SAAM,CAAY;IAC3C,UAAU;QAAC,MAAM;QAAQ,UAAU;IAAI;IACvC,WAAW;QAAC;YACV,OAAO;gBAAC,MAAM;gBAAQ,UAAU;YAAI;YACpC,IAAI;gBAAC,MAAM;gBAAQ,UAAU;YAAI;YACjC,YAAY;gBAAC,MAAM;gBAAQ,UAAU;gBAAM,MAAM;oBAAC;oBAAO;oBAAS;iBAAO;YAAA;YACzE,QAAO;gBAAC,MAAM;gBAAQ,UAAU;gBAAK,MAAK;oBAAC;oBAAW;iBAAW;YAAA;YACjE,OAAO;gBAAC,MAAM;gBAAO,UAAU;YAAI;QACrC;KACC;AACH;AAQA,MAAM,WAAW,yGAAA,CAAA,SAAM,CAAC,QAAQ,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAa,YAAY;uCAElD"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file://C%3A/codequest/src/app/api/questions/route.ts"],"sourcesContent":["import {  NextResponse } from 'next/server';\r\nimport dbConnect from '@/app/lib/mongodb';\r\nimport Question, { IQuestion } from '@/app/modals/questions';\r\n\r\n\r\nexport async function GET() {\r\n  try {\r\n   \r\n    await dbConnect();\r\n\r\n    \r\n    const questions: IQuestion[] = await Question.find({});\r\n    return NextResponse.json(questions, { status: 200 });\r\n  } catch (error) {\r\n    console.error('Failed to fetch questions:', error);\r\n    return NextResponse.json({ error: 'Failed to fetch questions' }, { status: 500 });\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAGO,eAAe;IACpB,IAAI;QAEF,MAAM,CAAA,GAAA,8HAAA,CAAA,UAAS,AAAD;QAGd,MAAM,YAAyB,MAAM,mIAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,CAAC;QACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,WAAW;YAAE,QAAQ;QAAI;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}