(()=>{var e={};e.id=689,e.ids=[689],e.modules={6037:e=>{"use strict";e.exports=require("mongoose")},846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},7412:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>x,routeModule:()=>p,serverHooks:()=>g,workAsyncStorage:()=>l,workUnitAsyncStorage:()=>m});var s={};r.r(s),r.d(s,{PATCH:()=>d});var o=r(2706),n=r(8203),i=r(5994),u=r(8264),a=r(5992),c=r(9187);async function d(e){let{params:t}=e,r=t?.id;try{if(console.log("Attempting to connect to the database..."),await (0,u.A)(),console.log("Database connection successful."),!r)return c.NextResponse.json({error:"Question ID is required"},{status:400});console.log("PATCH request received with Question ID: ",r);let e=await a.A.findOneAndUpdate({"questions.id":r},{$set:{"questions.$[elem].status":" âœ… completed"}},{arrayFilters:[{"elem.id":r}],new:!0});if(!e)return c.NextResponse.json({error:"Question not found"},{status:404});return console.log("Question status updated successfully: ",e),c.NextResponse.json({message:"Question completed successfully",data:e})}catch(e){return console.error("Failed to update question status: ",e),c.NextResponse.json({error:"Failed to update question status"},{status:500})}}let p=new o.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/submit/[id]/status/route",pathname:"/api/submit/[id]/status",filename:"route",bundlePath:"app/api/submit/[id]/status/route"},resolvedPagePath:"C:\\codequest\\src\\app\\api\\submit\\[id]\\status\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:l,workUnitAsyncStorage:m,serverHooks:g}=p;function x(){return(0,i.patchFetch)({workAsyncStorage:l,workUnitAsyncStorage:m})}},6487:()=>{},8335:()=>{},8264:(e,t,r)=>{"use strict";r.d(t,{A:()=>i});var s=r(6037),o=r.n(s);let n=global.mongoose;n||(n=global.mongoose={conn:null,promise:null});let i=async function(){if(n.conn)return n.conn;let e=process.env.MONGO_URI;if(!e)throw Error("MongoDB connection URI is not defined in environment variables.");n.promise||(n.promise=new Promise((t,r)=>{o().connect(e,{}).then(e=>t(e)).catch(e=>r(e))}));try{return n.conn=await n.promise,n.conn}catch(e){throw console.error("Error connecting to MongoDB:",e),Error("Database connection failed")}}},5992:(e,t,r)=>{"use strict";r.d(t,{A:()=>n});var s=r(6037);let o=new s.Schema({category:{type:String,required:!0},questions:[{title:{type:String,required:!0},id:{type:String,required:!0},difficulty:{type:String,required:!0,enum:["Easy","Medium","Hard"]},status:{type:String,required:!0,enum:["\uD83D\uDD12Locked","Unlocked"]},route:{type:String,required:!0}}]}),n=s.models.Question||(0,s.model)("Question",o)}};var t=require("../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[994,452],()=>r(7412));module.exports=s})();